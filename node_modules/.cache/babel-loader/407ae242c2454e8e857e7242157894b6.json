{"ast":null,"code":"import objectAssign from 'object-assign';\nimport ActionTypes from './actionTypes';\nconst bucket_id = \"bucket\";\nconst initialState = {};\n\nconst updateBucket = (bucket, item, act) => {\n  console.log(\"Hello\", item, bucket);\n  let isAlreadyHere = false;\n\n  for (let i in bucket) {\n    if (bucket[i].url == item.url) isAlreadyHere = true;\n  }\n\n  if (!isAlreadyHere) {\n    bucket.push(item);\n    typeof localStorage != \"undefined\" && localStorage.setItem(bucket_id, JSON.stringify(bucket));\n  }\n\n  return bucket;\n};\n\nconst reorderBucket = (bucket, item) => {\n  /**\n  class List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {...props};\n  }\n  dragStart(e) {\n    this.dragged = e.currentTarget;\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', this.dragged);\n  }\n  dragEnd(e) {\n    this.dragged.style.display = 'block';\n    this.dragged.parentNode.removeChild(placeholder);\n    \n    // update state\n    var data = this.state.colors;\n    var from = Number(this.dragged.dataset.id);\n    var to = Number(this.over.dataset.id);\n    if(from < to) to--;\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    this.setState({colors: data});\n  }\n  dragOver(e) {\n    e.preventDefault();\n    this.dragged.style.display = \"none\";\n    if(e.target.className === 'placeholder') return;\n    this.over = e.target;\n    e.target.parentNode.insertBefore(placeholder, e.target);\n  }\n  render() {\n    var listItems = this.state.colors.map((item, i) => {\n      return (\n        <li \n          data-id={i}\n          key={i}\n          draggable='true'\n          onDragEnd={this.dragEnd.bind(this)}\n          onDragStart={this.dragStart.bind(this)}>{item}</li>\n      )\n     });\n  return (\n  \t<ul onDragOver={this.dragOver.bind(this)}>\n        {listItems}\n      </ul>\n  )\n  }\n  }\n  class App extends React.Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n  \tcolors: ['Red', 'Green', 'Blue', 'Yellow', 'Black', 'White', 'Orange']\n  }\n  }\n  render() {\n  return (\n  \t<div>\n        <List colors={this.state.colors} />\t\n  \t</div>\n  )\n  }\n  }\n  ReactDOM.render(\n  <App />,\n    document.getElementById('app')\n  ); */\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_BUCKET:\n      return objectAssign({}, state, {\n        fetchingBucket: true\n      });\n\n    case ActionTypes.SET_BUCKET:\n      return objectAssign({}, state, {\n        bucket: action.data,\n        fetchingBucket: false\n      });\n\n    case ActionTypes.UPDATE_BUCKET:\n      return objectAssign({}, state, {\n        bucket: updateBucket(state.bucket, action.data, actionlabel)\n      });\n\n    case ActionTypes.REORDER_BUCKET:\n      return objectAssign({}, state, {\n        bucket: reorderBucket(state.bucket, action.data)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/priyarajak/priya/src/containers/universityBucket/reducer.js"],"names":["objectAssign","ActionTypes","bucket_id","initialState","updateBucket","bucket","item","act","console","log","isAlreadyHere","i","url","push","localStorage","setItem","JSON","stringify","reorderBucket","reducer","state","action","type","FETCH_BUCKET","fetchingBucket","SET_BUCKET","data","UPDATE_BUCKET","actionlabel","REORDER_BUCKET"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,SAAS,GAAG,QAAlB;AACA,MAAMC,YAAY,GAAG,EAArB;;AAGA,MAAMC,YAAY,GAAG,CAACC,MAAD,EAASC,IAAT,EAAcC,GAAd,KAAsB;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,IAArB,EAA0BD,MAA1B;AACA,MAAIK,aAAa,GAAG,KAApB;;AACA,OAAI,IAAIC,CAAR,IAAaN,MAAb,EACA;AACE,QAAGA,MAAM,CAACM,CAAD,CAAN,CAAUC,GAAV,IAAiBN,IAAI,CAACM,GAAzB,EACAF,aAAa,GAAC,IAAd;AACD;;AACD,MAAG,CAACA,aAAJ,EACA;AACEL,IAAAA,MAAM,CAACQ,IAAP,CAAYP,IAAZ;AACA,WAAOQ,YAAP,IAAuB,WAAvB,IAAsCA,YAAY,CAACC,OAAb,CAAqBb,SAArB,EAA+Bc,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAA/B,CAAtC;AACD;;AAGD,SAAOA,MAAP;AAED,CAjBD;;AAmBA,MAAMa,aAAa,GAAG,CAACb,MAAD,EAASC,IAAT,KAAkB;AACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIC,CAvED;;AAyEA,MAAMa,OAAO,GAAG,CAACC,KAAK,GAAGjB,YAAT,EAAuBkB,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKrB,WAAW,CAACsB,YAAjB;AACE,aAAOvB,YAAY,CAAC,EAAD,EAAKoB,KAAL,EAAY;AAC7BI,QAAAA,cAAc,EAAE;AADa,OAAZ,CAAnB;;AAGF,SAAKvB,WAAW,CAACwB,UAAjB;AACE,aAAOzB,YAAY,CAAC,EAAD,EAAKoB,KAAL,EAAY;AAC7Bf,QAAAA,MAAM,EAAEgB,MAAM,CAACK,IADc;AAE7BF,QAAAA,cAAc,EAAE;AAFa,OAAZ,CAAnB;;AAIA,SAAKvB,WAAW,CAAC0B,aAAjB;AACE,aAAO3B,YAAY,CAAC,EAAD,EAAKoB,KAAL,EAAY;AAC7Bf,QAAAA,MAAM,EAAED,YAAY,CAACgB,KAAK,CAACf,MAAP,EAAegB,MAAM,CAACK,IAAtB,EAA2BE,WAA3B;AADS,OAAZ,CAAnB;;AAGA,SAAK3B,WAAW,CAAC4B,cAAjB;AACA,aAAO7B,YAAY,CAAC,EAAD,EAAKoB,KAAL,EAAY;AAC7Bf,QAAAA,MAAM,EAAEa,aAAa,CAACE,KAAK,CAACf,MAAP,EAAegB,MAAM,CAACK,IAAtB;AADQ,OAAZ,CAAnB;;AAGJ;AACE,aAAON,KAAP;AAnBJ;AAqBD,CAtBH;;AAwBE,eAAeD,OAAf","sourcesContent":["import objectAssign from 'object-assign';\nimport ActionTypes from './actionTypes';\n\nconst bucket_id = \"bucket\"\nconst initialState = {\n};\n\nconst updateBucket = (bucket, item,act) => {\n  console.log(\"Hello\", item,bucket);\n  let isAlreadyHere = false;\n  for(let i in bucket)\n  {\n    if(bucket[i].url == item.url)\n    isAlreadyHere=true;\n  }\n  if(!isAlreadyHere)\n  {\n    bucket.push(item);\n    typeof localStorage != \"undefined\" && localStorage.setItem(bucket_id,JSON.stringify(bucket))\n  }\n\n  \n  return bucket;\n\n}\n\nconst reorderBucket = (bucket, item) => {\n  /**\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {...props};\n  }\n  dragStart(e) {\n    this.dragged = e.currentTarget;\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', this.dragged);\n  }\n  dragEnd(e) {\n    this.dragged.style.display = 'block';\n    this.dragged.parentNode.removeChild(placeholder);\n    \n    // update state\n    var data = this.state.colors;\n    var from = Number(this.dragged.dataset.id);\n    var to = Number(this.over.dataset.id);\n    if(from < to) to--;\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    this.setState({colors: data});\n  }\n  dragOver(e) {\n    e.preventDefault();\n    this.dragged.style.display = \"none\";\n    if(e.target.className === 'placeholder') return;\n    this.over = e.target;\n    e.target.parentNode.insertBefore(placeholder, e.target);\n  }\n\trender() {\n    var listItems = this.state.colors.map((item, i) => {\n      return (\n        <li \n          data-id={i}\n          key={i}\n          draggable='true'\n          onDragEnd={this.dragEnd.bind(this)}\n          onDragStart={this.dragStart.bind(this)}>{item}</li>\n      )\n     });\n\t\treturn (\n\t\t\t<ul onDragOver={this.dragOver.bind(this)}>\n        {listItems}\n      </ul>\n\t\t)\n\t}\n}\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcolors: ['Red', 'Green', 'Blue', 'Yellow', 'Black', 'White', 'Orange']\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n        <List colors={this.state.colors} />\t\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nReactDOM.render(\n\t<App />,\n    document.getElementById('app')\n); */\n\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case ActionTypes.FETCH_BUCKET:\n        return objectAssign({}, state, {\n          fetchingBucket: true\n        });\n      case ActionTypes.SET_BUCKET:\n        return objectAssign({}, state, {\n          bucket: action.data,\n          fetchingBucket: false\n        });\n        case ActionTypes.UPDATE_BUCKET:\n          return objectAssign({}, state, {\n            bucket: updateBucket(state.bucket, action.data,actionlabel),\n          });\n          case ActionTypes.REORDER_BUCKET:\n          return objectAssign({}, state, {\n            bucket: reorderBucket(state.bucket, action.data),\n          });\n      default:\n        return state;\n    }\n  };\n  \n  export default reducer;"]},"metadata":{},"sourceType":"module"}