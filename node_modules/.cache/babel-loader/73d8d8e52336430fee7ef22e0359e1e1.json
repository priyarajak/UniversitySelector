{"ast":null,"code":"import objectAssign from 'object-assign';\nimport ActionTypes from './actionTypes';\nconst initialState = {};\n\nconst updateBucket = (bucket, item) => {\n  console.log(bucket, item);\n\n  for (let uni of bucket) {\n    if (uni && uni.url === item.url && item.country == uni.country && item.universityName == uni.universityName) {\n      return bucket;\n    }\n  }\n\n  bucket.push(item);\n  typeof localStorage != \"undefined\" && localStorage.setItem(\"bucket\", JSON.stringify(bucket));\n  return bucket;\n};\n\nconst reorderBucket = (bucket, item) => {};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_BUCKET:\n      return objectAssign({}, state, {\n        fetchingBucket: true\n      });\n\n    case ActionTypes.SET_BUCKET:\n      return objectAssign({}, state, {\n        bucket: action.data,\n        fetchingBucket: false\n      });\n\n    case ActionTypes.UPDATE_BUCKET:\n      return objectAssign({}, state, {\n        bucket: updateBucket(state.bucket, action.data)\n      });\n\n    case ActionTypes.REORDER_BUCKET:\n      return objectAssign({}, state, {\n        bucket: reorderBucket(state.bucket, action.data)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/priyarajak/priya/src/containers/universityBucket/reducer.js"],"names":["objectAssign","ActionTypes","initialState","updateBucket","bucket","item","console","log","uni","url","country","universityName","push","localStorage","setItem","JSON","stringify","reorderBucket","reducer","state","action","type","FETCH_BUCKET","fetchingBucket","SET_BUCKET","data","UPDATE_BUCKET","REORDER_BUCKET"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAGA,MAAMC,YAAY,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoBC,IAApB;;AACF,OAAK,IAAIG,GAAT,IAAgBJ,MAAhB,EAAwB;AACtB,QAAGI,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYJ,IAAI,CAACI,GAAxB,IAA+BJ,IAAI,CAACK,OAAL,IAAgBF,GAAG,CAACE,OAAnD,IAA+DL,IAAI,CAACM,cAAL,IAAuBH,GAAG,CAACG,cAA7F,EAA6G;AAC3G,aAAOP,MAAP;AACD;AACF;;AACDA,EAAAA,MAAM,CAACQ,IAAP,CAAYP,IAAZ;AACA,SAAOQ,YAAP,IAAuB,WAAvB,IAAsCA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAA9B,CAAtC;AACA,SAAOA,MAAP;AACC,CAVD;;AAYA,MAAMa,aAAa,GAAG,CAACb,MAAD,EAASC,IAAT,KAAkB,CAEvC,CAFD;;AAIA,MAAMa,OAAO,GAAG,CAACC,KAAK,GAAGjB,YAAT,EAAuBkB,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKpB,WAAW,CAACqB,YAAjB;AACE,aAAOtB,YAAY,CAAC,EAAD,EAAKmB,KAAL,EAAY;AAC7BI,QAAAA,cAAc,EAAE;AADa,OAAZ,CAAnB;;AAGF,SAAKtB,WAAW,CAACuB,UAAjB;AACE,aAAOxB,YAAY,CAAC,EAAD,EAAKmB,KAAL,EAAY;AAC7Bf,QAAAA,MAAM,EAAEgB,MAAM,CAACK,IADc;AAE7BF,QAAAA,cAAc,EAAE;AAFa,OAAZ,CAAnB;;AAIA,SAAKtB,WAAW,CAACyB,aAAjB;AACE,aAAO1B,YAAY,CAAC,EAAD,EAAKmB,KAAL,EAAY;AAC7Bf,QAAAA,MAAM,EAAED,YAAY,CAACgB,KAAK,CAACf,MAAP,EAAegB,MAAM,CAACK,IAAtB;AADS,OAAZ,CAAnB;;AAGA,SAAKxB,WAAW,CAAC0B,cAAjB;AACA,aAAO3B,YAAY,CAAC,EAAD,EAAKmB,KAAL,EAAY;AAC7Bf,QAAAA,MAAM,EAAEa,aAAa,CAACE,KAAK,CAACf,MAAP,EAAegB,MAAM,CAACK,IAAtB;AADQ,OAAZ,CAAnB;;AAGJ;AACE,aAAON,KAAP;AAnBJ;AAqBD,CAtBH;;AAwBE,eAAeD,OAAf","sourcesContent":["import objectAssign from 'object-assign';\nimport ActionTypes from './actionTypes';\n\nconst initialState = {\n};\n\nconst updateBucket = (bucket, item) => {\n  console.log(bucket, item)\nfor( let uni of bucket) {\n  if(uni && uni.url === item.url && item.country == uni.country &&  item.universityName == uni.universityName) {\n    return bucket\n  }\n}\nbucket.push(item);\ntypeof localStorage != \"undefined\" && localStorage.setItem(\"bucket\",JSON.stringify(bucket))\nreturn bucket;\n}\n\nconst reorderBucket = (bucket, item) => {\n\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case ActionTypes.FETCH_BUCKET:\n        return objectAssign({}, state, {\n          fetchingBucket: true\n        });\n      case ActionTypes.SET_BUCKET:\n        return objectAssign({}, state, {\n          bucket: action.data,\n          fetchingBucket: false\n        });\n        case ActionTypes.UPDATE_BUCKET:\n          return objectAssign({}, state, {\n            bucket: updateBucket(state.bucket, action.data),\n          });\n          case ActionTypes.REORDER_BUCKET:\n          return objectAssign({}, state, {\n            bucket: reorderBucket(state.bucket, action.data),\n          });\n      default:\n        return state;\n    }\n  };\n  \n  export default reducer;"]},"metadata":{},"sourceType":"module"}