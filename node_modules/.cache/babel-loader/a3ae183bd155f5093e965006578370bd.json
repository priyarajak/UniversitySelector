{"ast":null,"code":"import ActionTypes from './actionTypes';\nimport universitiesParser from '../../shared/parser';\nimport request from '../../js/request/request';\n\nconst fetchingUniversity = () => ({\n  type: ActionTypes.FETCH_UNIVERSITIES\n});\n\nconst setUniversities = data => ({\n  type: ActionTypes.SET_UNIVERSITIES,\n  data\n});\n\nconst setSearchResults = data => ({\n  type: ActionTypes.SEARCH_RESULTS,\n  data\n});\n\nconst searching = data => ({\n  type: ActionTypes.SEARCHING,\n  data\n});\n\nconst getAllUniversity = () => dispatch => {\n  dispatch(fetchingUniversity());\n  return request.getAllUniversity().then(response => {\n    dispatch(setUniversities({\n      universities: universitiesParser(response && response.data || []),\n      universitiesByCountry: universitiesParser(response && response.data || [], 'country')\n    }));\n  }).catch(err => {\n    dispatch(setUniversities({}));\n  });\n};\n\nconst searchUniversities = (university, country) => dispatch => {\n  dispatch(searching());\n  return request.findUniversities(university, country).then(response => {\n    dispatch(setSearchResults(universitiesParser(response && response.data || [])));\n  }).catch(err => {\n    dispatch(setSearchResults(null));\n    console.log('error');\n  });\n};\n\nexport default {\n  getAllUniversity,\n  searchUniversities,\n  setSearchResults\n};","map":{"version":3,"sources":["/Users/priyarajak/priya/src/containers/home/actions.js"],"names":["ActionTypes","universitiesParser","request","fetchingUniversity","type","FETCH_UNIVERSITIES","setUniversities","data","SET_UNIVERSITIES","setSearchResults","SEARCH_RESULTS","searching","SEARCHING","getAllUniversity","dispatch","then","response","universities","universitiesByCountry","catch","err","searchUniversities","university","country","findUniversities","console","log"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,kBAAP,MAA+B,qBAA/B;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AACA,MAAMC,kBAAkB,GAAG,OAAO;AACjCC,EAAAA,IAAI,EAAEJ,WAAW,CAACK;AADe,CAAP,CAA3B;;AAIA,MAAMC,eAAe,GAAIC,IAAD,KAAW;AAClCH,EAAAA,IAAI,EAAEJ,WAAW,CAACQ,gBADgB;AAElCD,EAAAA;AAFkC,CAAX,CAAxB;;AAKA,MAAME,gBAAgB,GAAIF,IAAD,KAAW;AACnCH,EAAAA,IAAI,EAAEJ,WAAW,CAACU,cADiB;AAEnCH,EAAAA;AAFmC,CAAX,CAAzB;;AAKA,MAAMI,SAAS,GAAIJ,IAAD,KAAW;AAC5BH,EAAAA,IAAI,EAAEJ,WAAW,CAACY,SADU;AAE5BL,EAAAA;AAF4B,CAAX,CAAlB;;AAOA,MAAMM,gBAAgB,GAAG,MAAOC,QAAD,IAAc;AAC5CA,EAAAA,QAAQ,CAACX,kBAAkB,EAAnB,CAAR;AACA,SAAOD,OAAO,CAACW,gBAAR,GAA2BE,IAA3B,CAAgCC,QAAQ,IAAI;AAClDF,IAAAA,QAAQ,CAACR,eAAe,CAAC;AACfW,MAAAA,YAAY,EAAGhB,kBAAkB,CAAEe,QAAQ,IAAIA,QAAQ,CAACT,IAAtB,IAA+B,EAAhC,CADlB;AAEfW,MAAAA,qBAAqB,EAAEjB,kBAAkB,CAAEe,QAAQ,IAAIA,QAAQ,CAACT,IAAtB,IAA+B,EAAhC,EAAoC,SAApC;AAF1B,KAAD,CAAhB,CAAR;AAIA,GALM,EAKJY,KALI,CAKEC,GAAG,IAAI;AACfN,IAAAA,QAAQ,CAACR,eAAe,CAAC,EAAD,CAAhB,CAAR;AACA,GAPM,CAAP;AAQA,CAVD;;AAYA,MAAMe,kBAAkB,GAAI,CAACC,UAAD,EAAaC,OAAb,KAA0BT,QAAD,IAAc;AAClEA,EAAAA,QAAQ,CAACH,SAAS,EAAV,CAAR;AACA,SAAOT,OAAO,CAACsB,gBAAR,CAAyBF,UAAzB,EAAqCC,OAArC,EAA8CR,IAA9C,CAAmDC,QAAQ,IAAI;AACrEF,IAAAA,QAAQ,CAACL,gBAAgB,CACjBR,kBAAkB,CAAEe,QAAQ,IAAIA,QAAQ,CAACT,IAAtB,IAA+B,EAAhC,CADD,CAAjB,CAAR;AAGA,GAJM,EAIJY,KAJI,CAIEC,GAAG,IAAI;AACTN,IAAAA,QAAQ,CAACL,gBAAgB,CACvB,IADuB,CAAjB,CAAR;AAGNgB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,GATM,CAAP;AAUA,CAZD;;AAaA,eAAe;AACdb,EAAAA,gBADc;AAEXQ,EAAAA,kBAFW;AAGXZ,EAAAA;AAHW,CAAf","sourcesContent":["import ActionTypes from './actionTypes';\nimport universitiesParser from '../../shared/parser'\nimport request from '../../js/request/request'\nconst fetchingUniversity = () => ({\n\ttype: ActionTypes.FETCH_UNIVERSITIES\n});\n\nconst setUniversities = (data) => ({\n\ttype: ActionTypes.SET_UNIVERSITIES,\n\tdata\n});\n\nconst setSearchResults = (data) => ({\n\ttype: ActionTypes.SEARCH_RESULTS,\n\tdata\n})\n\nconst searching = (data) => ({\n\ttype: ActionTypes.SEARCHING,\n\tdata\n})\n\n\n\nconst getAllUniversity = () => (dispatch) => {\n\tdispatch(fetchingUniversity())\n\treturn request.getAllUniversity().then(response => {\n\t\tdispatch(setUniversities({\n            universities : universitiesParser((response && response.data) || []),\n            universitiesByCountry: universitiesParser((response && response.data) || [], 'country'),\n        }))\n\t}).catch(err => {\n\t\tdispatch(setUniversities({}))\n\t})\n}\n\nconst searchUniversities  = (university, country) => (dispatch) => {\n\tdispatch(searching())\n\treturn request.findUniversities(university, country).then(response => {\n\t\tdispatch(setSearchResults(\n          universitiesParser((response && response.data) || []),\n         ))\n\t}).catch(err => {\n        dispatch(setSearchResults(\n          null\n           ))\n\t\tconsole.log('error')\n\t})\n}\nexport default {\n\tgetAllUniversity,\n    searchUniversities,\n    setSearchResults\n}"]},"metadata":{},"sourceType":"module"}