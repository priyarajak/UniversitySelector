{"ast":null,"code":"import objectAssign from 'object-assign';\nimport ActionTypes from './actionTypes';\nconst initialState = {};\n\nconst updateBucket = (bucket, item) => {\n  console.log(\"Hello\", item, bucket);\n  let isAlreadyHere = false;\n\n  for (let i in bucket) {\n    if (bucket[i].url == item.url) isAlreadyHere = true;\n  }\n\n  if (!isAlreadyHere) {}\n\n  return bucket;\n};\n\nconst reorderBucket = (bucket, item) => {};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_BUCKET:\n      return objectAssign({}, state, {\n        fetchingBucket: true\n      });\n\n    case ActionTypes.SET_BUCKET:\n      return objectAssign({}, state, {\n        bucket: action.data,\n        fetchingBucket: false\n      });\n\n    case ActionTypes.UPDATE_BUCKET:\n      return objectAssign({}, state, {\n        bucket: updateBucket(state.bucket, action.data)\n      });\n\n    case ActionTypes.REORDER_BUCKET:\n      return objectAssign({}, state, {\n        bucket: reorderBucket(state.bucket, action.data)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/priyarajak/priya/src/containers/universityBucket/reducer.js"],"names":["objectAssign","ActionTypes","initialState","updateBucket","bucket","item","console","log","isAlreadyHere","i","url","reorderBucket","reducer","state","action","type","FETCH_BUCKET","fetchingBucket","SET_BUCKET","data","UPDATE_BUCKET","REORDER_BUCKET"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAGA,MAAMC,YAAY,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,IAArB,EAA0BD,MAA1B;AACA,MAAII,aAAa,GAAG,KAApB;;AACA,OAAI,IAAIC,CAAR,IAAaL,MAAb,EACA;AACE,QAAGA,MAAM,CAACK,CAAD,CAAN,CAAUC,GAAV,IAAiBL,IAAI,CAACK,GAAzB,EACAF,aAAa,GAAC,IAAd;AACD;;AACD,MAAG,CAACA,aAAJ,EACA,CAEC;;AAGD,SAAOJ,MAAP;AAED,CAhBD;;AAkBA,MAAMO,aAAa,GAAG,CAACP,MAAD,EAASC,IAAT,KAAkB,CAEvC,CAFD;;AAIA,MAAMO,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,WAAW,CAACe,YAAjB;AACE,aAAOhB,YAAY,CAAC,EAAD,EAAKa,KAAL,EAAY;AAC7BI,QAAAA,cAAc,EAAE;AADa,OAAZ,CAAnB;;AAGF,SAAKhB,WAAW,CAACiB,UAAjB;AACE,aAAOlB,YAAY,CAAC,EAAD,EAAKa,KAAL,EAAY;AAC7BT,QAAAA,MAAM,EAAEU,MAAM,CAACK,IADc;AAE7BF,QAAAA,cAAc,EAAE;AAFa,OAAZ,CAAnB;;AAIA,SAAKhB,WAAW,CAACmB,aAAjB;AACE,aAAOpB,YAAY,CAAC,EAAD,EAAKa,KAAL,EAAY;AAC7BT,QAAAA,MAAM,EAAED,YAAY,CAACU,KAAK,CAACT,MAAP,EAAeU,MAAM,CAACK,IAAtB;AADS,OAAZ,CAAnB;;AAGA,SAAKlB,WAAW,CAACoB,cAAjB;AACA,aAAOrB,YAAY,CAAC,EAAD,EAAKa,KAAL,EAAY;AAC7BT,QAAAA,MAAM,EAAEO,aAAa,CAACE,KAAK,CAACT,MAAP,EAAeU,MAAM,CAACK,IAAtB;AADQ,OAAZ,CAAnB;;AAGJ;AACE,aAAON,KAAP;AAnBJ;AAqBD,CAtBH;;AAwBE,eAAeD,OAAf","sourcesContent":["import objectAssign from 'object-assign';\nimport ActionTypes from './actionTypes';\n\nconst initialState = {\n};\n\nconst updateBucket = (bucket, item) => {\n  console.log(\"Hello\", item,bucket);\n  let isAlreadyHere = false;\n  for(let i in bucket)\n  {\n    if(bucket[i].url == item.url)\n    isAlreadyHere=true;\n  }\n  if(!isAlreadyHere)\n  {\n    \n  }\n\n  \n  return bucket;\n\n}\n\nconst reorderBucket = (bucket, item) => {\n\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case ActionTypes.FETCH_BUCKET:\n        return objectAssign({}, state, {\n          fetchingBucket: true\n        });\n      case ActionTypes.SET_BUCKET:\n        return objectAssign({}, state, {\n          bucket: action.data,\n          fetchingBucket: false\n        });\n        case ActionTypes.UPDATE_BUCKET:\n          return objectAssign({}, state, {\n            bucket: updateBucket(state.bucket, action.data),\n          });\n          case ActionTypes.REORDER_BUCKET:\n          return objectAssign({}, state, {\n            bucket: reorderBucket(state.bucket, action.data),\n          });\n      default:\n        return state;\n    }\n  };\n  \n  export default reducer;"]},"metadata":{},"sourceType":"module"}